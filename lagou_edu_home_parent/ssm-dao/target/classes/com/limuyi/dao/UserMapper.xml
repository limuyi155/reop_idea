<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.limuyi.dao.UserMapper">
    <!--用户分页&多条件组合查询  List<User> findAllUserByPage(UserVo userVo);-->
    <select id="findAllUserByPage" parameterType="UserVo" resultType="User">
        select * from user
        <where>
            <if test="true">
                and is_del != 1
            </if>
            <if test="username!=null and username!=''">
                and name=#{username}
            </if>
            <if test="startCreateTime != null and endCreateTime != null">
                and create_time between #{startCreateTime} and #{endCreateTime}
            </if>
        </where>
    </select>

    <!--修改用户状态  public void updateUserStatus(User user);-->
    <update id="updateUserStatus" parameterType="User">
        update user set status = #{status},update_time=#{update_time} where id=#{id}
    </update>

    <!-- 用户登录（根据用户名查询具体的用户信息）public User login(User user);-->
    <select id="login" parameterType="User" resultType="User">
        select * from user where phone= #{phone}
    </select>

    <!--注册 void register(User user);-->
    <insert id="register" parameterType="User">
        insert into user values (null ,#{name},#{portrait},#{phone},#{password},#{reg_ip},#{account_non_expired},#{credentials_non_expired},#{account_non_locked},#{status},#{is_del},#{create_time},#{update_time})
    </insert>

    <!--根据用户ID查询关联的角色信息  public List<Role> findUserRelationRoleById(Integer id);-->
    <select id="findUserRelationRoleById" parameterType="int" resultType="Role">
        SELECT r.* FROM roles r INNER JOIN user_role_relation ur ON r.id= ur.role_id  WHERE ur.user_id=#{userid}
    </select>

    <!--根据用户ID删除中间表的关联关系  public void deleteUserContextRole(Integer userId);-->
    <delete id="deleteUserContextRole" parameterType="int">
        delete from user_role_relation where user_id = #{userId}
    </delete>
    <!--分配角色  public void userContextRole(User_Role_relation user_role_relation);-->
    <insert id="userContextRole" parameterType="User_Role_relation">
        insert into user_role_relation values (null,#{userId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedby})
    </insert>


    <!--1.根据用户ID查询关联的角色信息(上面已经有了)-->

    <!--2.根据角色ID，查询角色所拥有的顶级菜单信息  public List<Menu> findParentMenuByRoleId(List<Integer> ids);-->
    <select id="findParentMenuByRoleId" parameterType="java.util.List" resultType="Menu">
        SELECT
        DISTINCT m.*
        FROM
        roles r
        INNER JOIN role_menu_relation rm ON r.id = rm.role_id
        INNER JOIN menu m ON m.id = rm.menu_id
        WHERE
        m.parent_id = -1
        AND r.id IN
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
    </select>

    <!--3.根据PID，查询子菜单信息  public List<Menu> findSubMenuByPid(Integer pid);-->
    <select id="findSubMenuByPid" parameterType="int" resultType="Menu">
        SELECT * FROM menu WHERE parent_id = #{pid}
    </select>
    <!--4.获得用户拥有的资源权限信息  public List<Resource> findResourceByRoleId(List<Integer> ids);-->
    <select id="findResourceByRoleId" parameterType="java.util.List" resultType="Resource">
        SELECT DISTINCT
            r.*
        FROM
            resource r
            INNER JOIN role_resource_relation rr ON r.id = rr.resource_id
            INNER JOIN roles ro ON ro.id = rr.role_id
        WHERE
            ro.id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
</mapper>

